#!/bin/bash
# If INPUT video file's first audio stream is multi-channel, copy and downconvert
# it to AAC 2.0 and make this new stream the first and default audio stream.  
# Video and audio languages are marked as English.
# Existing audio stream indices are shuffled down.
# Subtitles, Chapters and Video streams are just copied.
#
# I need to get around to adding flags for AAC bitrate and loudnorm etc.
# But for now it works for me.
#
# turly, 2019

# Assume we want quiet output unless --verbose is specified
QUIETFLAGS="-nostats -loglevel 0"
DRYRUN=
FIXLANGS=1

# Audio tracks not in this list will get dumped
# You should have run fix-mkv-langs first to fix up "undefined" / "unknown" langs
# Set empty to do no stripping.
# I like to watch European shows in their original language with subtitles
WANTED_AUDIOS=eng,spa,ger,fre,ita

# Args must appear before filename

while [ "$#" -gt 0 ]; do
    case "$1" in
    -v|--verbose)
        QUIETFLAGS=
        shift
        ;;
    --no-fix-langs)
        FIXLANGS=0
        shift
        ;;
    --fix-langs)
        FIXLANGS=1
        shift
        ;;
    --wanted-audios=*)      # comma-separated list of audio language codes
        WANTED_AUDIOS="${1/--wanted-audios=/}"
        shift
        ;;
    -n|--dry-run)           # not terribly applicable to ffmpeg / mkvtoolnix
        DRYRUN="-n"
        shift
        ;;
    *)                      # unknown arg, assume it's a filename which is processed below
        break;
        ;;
    esac
done


if [ $# -ne 1 ]; then
    echo "Usage: $0 [--verbose] VIDEOFILE"
    exit -1
fi

input="$1"
output="$1"

if [ "${output##*.}" == "mp4" ]; then
    MP4FLAGS="-movflags +faststart"
fi

if [ ${FIXLANGS} -eq 1 ]; then
    # Try to fix the video file's language metadata (video / audio / subtitle streams)
    fix-mkv-langs ${DRYRUN} "${input}" # fix language metadata in situ
fi

ATMPDIR=$(mktemp -d)                                # Create temporary dir ATMPDIR
trap 'rm -rf $ATMPDIR' EXIT                         # delete ATMPDIR on exit


output="$ATMPDIR/${input##*/}"                      # Same name as input except inside ATMPDIR

if [ "${input##*.}" == "mkv" -a "${WANTED_AUDIOS}" != "" ]; then   # got an mkv file and a set of desired audio langs - strip any unneeded audio streams

    LANGS=$(ffprobe "${input}" -show_entries stream=index:stream_tags=language -select_streams a -of compact=p=0:nk=1 -v 0)

    # Only want eng,spa,fre,ger,ita audio streams - moot if we have only one stream which we don't touch
    #n_audio_langs=$(ffprobe "${input}" -show_entries stream=index:stream_tags=language -select_streams a -of compact=p=0:nk=1 -v 0 | wc -w)
    n_audio_langs=$(echo "$LANGS" | wc -w)
    #echo "LANGS: $LANGS"
    #echo "n_audio_langs: $n_audio_langs"

    if [ $n_audio_langs -gt 1 ]; then               # Do nothing if only one stream
        A_LANGS=(${LANGS})                          # Languages in video file as array  
        BADLANGS=""
        GOODLANGS=""
        for lang in "${A_LANGS[@]}"                 # 1|tur 2|eng 3|ger 4|spa
        do
            thisLang="${lang/[0-9]|/}"              # remove the stream index digit|
            if [ "${WANTED_AUDIOS/$thisLang//}" == "${WANTED_AUDIOS}" ]; then
                echo "Input Contains unwanted language: $thisLang"
                BADLANGS="${thisLang} $BADLANGS"
            else
                GOODLANGS="${thisLang} $GOODLANGS"
            fi
        done
        if [ "$BADLANGS" != "" ]; then
            if [ "$GOODLANGS" != "" ]; then
                mkv_wanted_audio="$ATMPDIR/tmp-${input##*/}"    # Same name as input except inside ATMPDIR with tmp- prefix
                # Copy input file to $mkv_wanted_audio - only copying audio streams whose languages are in WANTED_AUDIOS
                echo "Stripping unwanted audio { ${BADLANGS}} from $input, leaving { ${GOODLANGS}}"
                if mkvmerge -q -o "${mkv_wanted_audio}" -a $WANTED_AUDIOS "${input}" ; then
                    if [ $(stat -c%s "$input") -ne $(stat -c%s "$mkv_wanted_audio") ]; then
                        mv "$mkv_wanted_audio" "$input"
                    fi
                fi
            else
                echo "NOT stripping unwanted audio { ${BADLANGS}} from $input, no good languages would remain"
            fi
        fi
    fi
fi

#title="${output##*/}"       ## dir1/dir2/foo.txt => foo.txt
#title="${title%.*}"         ## foo.txt ==> foo
#       -map_metadata -1 -metadata title="${title}" \
#       -metadata creation_time=2019-05-16T21:30:00 \
#       -map_chapters -1 \
#       -filter:a:0 "acompressor=ratio=4,loudnorm" \
#       -map 0:a:0? -c:a:0 aac -ac 2 \

STREAMS=$(ffprobe "$input" -show_entries format=nb_streams -v 0 -of compact=p=0:nk=1)

# We seem to need explicit individual per-stream -map_metadata commands.
MAPMETADATA=""
for ((cx = 3; cx <= STREAMS; ++cx )) ; do
    MAPMETADATA="${MAPMETADATA} -map_metadata:s:$cx 0:s:$((cx-1))"
done

if [[ -z ${AUDIO_FILTER+x} ]]; then                          # if AUDIO_FILTER not already set
    AUDIO_FILTER="-filter:a:0 acompressor=ratio=4,loudnorm"  # Expensive but worth it
fi

# Find #channels of first audio stream.  If > 2, downmix and add to output mkv, shuffling
# all other audio stream IDs down.
# I still haven't found how to copy the chapters metadata (language=eng).

CHANS=$(ffprobe -i "$input" -show_entries stream=channels -select_streams a:0 -of compact=p=0:nk=1 -v 0)

if [ "$CHANS" == "" ]; then                             # ffprobe didn't work for some reason
    CHANS=1                                             # so... pretend we have a 1-channel stream
fi                                                      # which means we won't do the AAC stuff

if [ $CHANS -gt 2 ]; then
    set -x
    INPUTFILESIZE=$(stat -c%s "$input")                 # Keep tabs on size for later - used to check whether we added an AAC stream

    ffmpeg -hide_banner ${QUIETFLAGS} -i "$input"                                                   \
           -map 0:v -c:v copy                           `# copy video`                              \
           -map_metadata:s:0 0:s:0                      `# and video metadata`                      \
           -map 0:a:0? -c:a:0 aac -ac 2                 `# first audio stream -> AAC 2.0`           \
                       -ar:a:0 48000 -b:a:0 160k                                                    \
                       ${AUDIO_FILTER}                                                              \
                       -disposition:a:0 default         `# make this AAC the default audio stream`  \
                       -metadata:s:a:0 title="2.0 AAC"                                              \
                       -metadata:s:a:0 language="eng"                                               \
           -map 0:a:0  -c:a:1 copy -disposition:a:1 none `# shuffle copy orig audio strm 0 to #1`   \
           -map 0:a:1? -c:a:2 copy -disposition:a:2 none `# likewise for stream 1 if it exists`     \
           -map 0:a:2? -c:a:3 copy -disposition:a:3 none `# disposition none == not dflt audio`     \
           -map 0:a:3? -c:a:4 copy -disposition:a:4 none                                            \
           -map_chapters 0                                                                          \
           -map 0:s? -c:s copy                           `# copy any existing subtitles`            \
           -map_metadata:s:2 0:s:1      `# assumes original audio stream is stream #1, sorry`       \
           ${MAPMETADATA}               `# Extra metadata explicit copies - why?`                   \
           ${MP4FLAGS} "${output}"
    set +x
    OUTPUTFILESIZE=$(stat -c%s "$output")
    if ((OUTPUTFILESIZE > INPUTFILESIZE))  ; then   # assume it worked if output file bigger
        echo "Moving temporary output file to original file $input"
        mv --verbose "$output" "$input"
        exit 0
    else
        echo "$input $INPUTFILESIZE"
        echo "$output $OUTPUTFILESIZE"
        >&2 echo "### Error - output file size $OUTPUTFILESIZE is smaller than input file size $INPUTFILESIZE."
        exit -1
    fi
else
    echo "$input: nothing to do, already has $CHANS-channel first audio stream"
fi

